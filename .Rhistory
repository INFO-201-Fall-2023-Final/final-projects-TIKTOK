View(max_pop)
View(max_pop)
source("~/Desktop/INFO201/INFO201 class prac.R")
View(max_pop)
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
# what was the most popular name in 2013
max_pop_13 <- max(names_2013$prop)
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
View(ans_row)
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
View(names_df)
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
View(sophia_2013)
sophia_prop <- sophia_2013$prop
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
install.packages("stringe")
str_detect("Sophia", "Sop")
# to get the rows in 2013 where the name contains "Sop"
tmp_df <- names_2013[str_detect(names_2013$name, "Sop"), ]
# to get the rows in 2013 where the name contains "Sop"
tmp_df <- names_2013[str_detect(names_2013$name, "Sop"), ]
source("~/Desktop/INFO201/INFO201 class prac.R")
source("~/Desktop/INFO201/INFO201 class prac.R")
# to get the rows in 2013 where the name contains "Sop"
tmp_df <- names_2013[str_detect(names_2013$name, "Sop"), ]
install.paga
install.packages(stringr)
str_detect("Sophia", "Sop")
names_2013 <- names_df[names_df$year == 2013, ]
# what was the most popular name in 2013
max_pop_13 <- max(names_2013$prop)
ans_row <- filter(name_2013, prop == max_prop_13)
ames_2013 <- names_df[names_df$year == 2013, ]
# what was the most popular name in 2013
max_pop_13 <- max(names_2013$prop)
ans_row <- filter(names_2013, prop == max_prop_13)
names_2013 <- filter(names_df, year == 2013)
source("~/Desktop/INFO201/INFO201 class prac.R")
names_df <- read.csv("/Users/sunnyyang/Desktop/INFO201/female_names.csv")
# create a data frame that contatins only the row of year 2013 in file
names_2013 <- filter(names_df, year == 2013)
source("~/Desktop/func_writing_exercise (1).R")
library(stringr)
library(dplyr) # optional
# 6. Use your function above to compute the number of ratings for coffee
# originating from Ethiopia. The numbers should match your earlier calculations.
# Save the resulting message in a variable called `eth_summary`
eth_summary <-
# 7. Use your function above to compute the number of ratings for coffee
# originating from Peru. You should get 11 ratings and 83 average score.
# Save the resulting message in a variable called `per_summary`
per_summary <-
source("~/Desktop/func_writing_exercise (1).R")
source("~/Desktop/func_writing_exercise (1).R")
source("~/Desktop/func_writing_exercise (1).R")
coffee <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
brary(stringr)
source("~/Desktop/func_writing_exercise (1).R")
source("~/Desktop/func_writing_exercise (1).R")
source("~/Desktop/func_writing_exercise (1).R")
# 1. Extract the `country_of_origin` column into a variable called `countries`
countries <- coffe$country_of_origin
# 1. Extract the `country_of_origin` column into a variable called `countries`
countries <- coffee$country_of_origin
coffee <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
install.package(“dplyr”)
install.package("dplyr")
install.packages("dplyr")
source("~/Desktop/func_writing_exercise (1).R")
brary(stringr)
source("~/Desktop/func_writing_exercise (1).R")
library(stringr)
library(dplyr) # optional
coffee <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-07/coffee_ratings.csv')
source("~/Desktop/func_writing_exercise (1).R")
install.packages("readr")
install.packages("dplyr")
install.packages("dplyr")
source("~/Desktop/func_writing_exercise (1).R")
source("~/Desktop/func_writing_exercise (1).R")
source("~/Desktop/func_writing_exercise (1).R")
View(count_ratings)
View(coffee)
# 7. Use your function above to compute the number of ratings for coffee
# originating from Peru. You should get 11 ratings and 83 average score.
# Save the resulting message in a variable called `per_summary`
per_summary <- count_ratings("Peru")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
name <- read.csv("/Users/sunnyyang/Desktop/INFO201/female_names.csv")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(name)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(sophia_2013)
View(names_2013)
sophia_2013 <- names_2013[names_2013$name == "Sophia", ]
name <- read.csv("/Users/sunnyyang/Desktop/INFO201/female_names.csv")
max_pop_13 <- max(names_2013$prop)
ans_row <- filter(names_2013, prop == max_pop_13)
ans <- select(ans_row, name)
ans <- pull(ans)
max_pop_13 <- max(names_2013$prop)
ans_row <- filter(names_2013, prop == max_pop_13)
ans <- select(ans_row, name)
ans <- pull(ans)
print(ans)
source("~/.active-rstudio-document")
most_popular_in_yr <- function(yr) {
names_yr <- name[name$year == yr, ]
max_prop_yr <- max(names_yr$prop)
ans <- names_yr[names_yr$prop == max_prop_yr, "name"]
return(ans)
}
print(most_popular_in_yr(1994))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
number_per_year <- function(name, year) {
names <- name[name$name == name, ]
ans <- names_2013[names_2013$name == names, "name"]
}
print(number_per_year(Laura, 1995))
source("~/.active-rstudio-document")
number_per_year <- function(name, year) {
names <- name[name$name == name, ]
ans <- names_2013[names_2013$name == names, "name"]
}
print(number_per_year("Laura", 1995))
number_per_year <- function(name, year) {
names <- name[name$name == name, ]
ans <- names_2013[names_2013$name == names, "name"]
}
print(number_per_year("Laura", 1995))
number_per_year <- function(name, year) {
names <- name[name$name == name, ]
ans <- names_2013[names_2013$name == names, "name"]
}
print(number_per_year("Laura", 1995))
number_per_year <- function(name, year) {
names <- name[name$year == name, ]
ans <- names_2013[names_2013$name == names, "name"]
}
print(number_per_year("Laura", 1995))
source("~/.active-rstudio-document")
abort
number_per_year <- function(name, year) {
names <- name[name$year == name, ]
ans <- names_2013[names_2013$name == names, "name"]
return(ans)
}
print(number_per_year("Laura", 1995))
number_per_year <- function(name, year) {
names <- name[name$year == name, ]
ans <- names_2013[names_2013$name == names, "name"]
return(ans)
}
print(number_per_year("Laura", 1995))
number_per_year <- function(namee, year) {
names <- name[name$namee == namee, ]
ans <- names_2013[names_2013$name == names, "name"]
return(ans)
}
print(number_per_year("Laura", 1995))
names_2013 <- name[name$year == 2013, ]
sophia_2013 <- names_2013[names_2013$name == "Sophia", ]
library(stringr)
library(dplyr)
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
number_per_year <- function(namee, year) {
# names <- name[name$name == namee, ]
ans <- names_2013[names_2013$name == names, "name"]
# names_2013 <- name[name$year == year, ]
# sophia_2013 <- names_2013[names_2013$name == "Sophia", ]
return(ans)
}
print(number_per_year("Laura", 1995))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/lec6.R")
source("~/lec6.R")
source("~/lec6.R")
source("~/lec6.R")
source("~/lec6.R")
source("~/lec6.R")
source("~/lec6.R")
source("~/lec6.R")
number_per_year <- function(name, yr) {
name_in_year <- names_df[names_df$year == yr & names_df$name == name,]
return(name_in_year)
}
print(number_per_year("Laura", 1995))
number_per_year <- function(name, yr) {
name_in_year <- names_df[names_df$year == yr & names_df$name == name,]
return(name_in_year)
}
print(number_per_year("Sunny", 1995))
names_df <- read.csv("/Users/sunnyyang/Desktop/INFO201/female_names.csv")
source("~/lec6.R")
number_per_year <- function(name, yr) {
name_in_year <- names_df[names_df$year == yr & names_df$name == name,]
return(name_in_year$prop)
}
print(number_per_year("Sunny", 1995))
source("~/lec6.R")
source("~/lec6.R")
source("~/Downloads/HW1/hw1.R")
library(readr)
X2013_Video_Games_Dataset <- read_csv("Downloads/HW1/2013_Video_Games_Dataset.csv")
View(X2013_Video_Games_Dataset)
df <- read.csv("2013_Video_Games_Dataset.csv") #loads in your dataset DO NOT CHANGE!!
source("~/Downloads/HW1/hw1.R")
install.packages("stringr")
install.packages("stringr")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
# How many games in total are in this dataset? Store this value into a variable called `total_games`
total_games <- sum(df$nrow(Title))
y_list <- list(name = "Sam", age = 5)
typeof(list)
# How many games in total are in this dataset? Store this value into a variable called `total_games`
total_games <- length(df$Title)
# How many games in this dataset are sequels? Store this value into a variable called `total_seq`
total_seq <- length(df$Sequel & Sequel > 0)
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
View(df)
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
AAA <- c("Activision", "Nintendo", "Rockstar", "Sony", "Disney", "Electronic Arts", "Microsoft")
total_AAA_games <- function(AAA) {
count <- 0
uniquePublisher <- list()
for (i in 1:length(AAA)) {
if(df$Publisher == AAA[i] & !is.element(AAA[i], uniquePublisher)) {
count <- count + 1
uniquePublisher <- append(uniquePublisher, AAA[i])
}
}
return(count)
}
AAA <- c("Activision", "Nintendo", "Rockstar", "Sony", "Disney", "Electronic Arts", "Microsoft")
total_AAA_games <- function(AAA) {
count <- 0
uniquePublisher <- list()
for (i in 1:length(AAA)) {
if(df$Publisher == AAA[i] & !is.element(AAA[i], uniquePublisher)) {
count <- count + 1
uniquePublisher <- append(uniquePublisher, AAA[i])
}
}
return(count)
}
print(total_AAA_games(AAA))
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
# Check if each game is published by an AAA studio
is_aaa_game <- str_detect(df$Publisher, aaa_publishers)
}
View(names_2013)
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
# How many games in total are in this dataset? Store this value into a variable called `total_games`
total_games <- sum(df$Title)
source("~/Downloads/HW1/hw1.R")
setwd("~/")
setwd("~/")
setwd("~/")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
print(name_in_year)
name_in_year <- df[df$year == year]
print(name_in_year)
num_games_per_yr <- function(year){
#function body goes here
name_in_year <- df[df$year == year]
print(name_in_year)
return(length(name_in_year))
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
print(games_per_yr)
print(games_2004)
print(games_2005)
print(games_2010)
# Using the variables `games_2004`, `games_2005`, and `games_2010` check if elements
# in your vector `games_per_yr` are in the correct order. Meaning the first index
# in your vector should store the same value as games_2004, the second index should
# store the same value as `games_2005`, and the final index should store the same
# value as `games_2010`.For this check, you should create a variable named `correct_order`
# that stores TRUE if the elements are in the correct order, and FALSE if they are not.
correct_order <- games_per_yr[1] == games_2004 &
games_per_yr[2] == games_2005 &
games_per_yr[length(games_per_yr)] == games_2010
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
setwd("~/")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
source("~/Downloads/HW1/hw1.R")
shiny::runApp('Desktop/INFO201/HW 5')
source("~/Desktop/INFO201/HW 5/analysis.R")
setwd("~/Desktop/INFO201/HW 5")
source("~/Desktop/INFO201/HW 5/analysis.R")
install.packages("shinytest")
install.packages("shinytest")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Desktop/INFO201/HW 5/analysis.R")
runApp()
rlang::last_trace()
runApp()
setwd("~/Desktop/INFO201/HW 5/app.R")
setwd("~/Desktop/INFO201/HW 5")
recordTest()
install.packages("shinytest")
install.packages("shinytest")
recordTest()
setwd("~/Desktop/INFO201/HW 5")
recordTest()
recordTest()
shiny::runApp()
recordTest()
shinytest::installDependencies()
recordTest()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
runApp()
recordTest()
runApp()
runApp()
# Creating your UI -------------------------------------------------------------
#
# Part of this UI is created for you. You need to add elements to make your UI
# match the example provided in the instruction.
#
#-------------------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Examining Lyrics in College Fights Songs"),
br(), # the br() function adss line breaks
p("Let's examine the fight songs from 65 different universities across the US
(i.e. all those in the Power Five conferences (the ACC, Big Ten, Big 12, Pac-12 and SEC), plus Notre Dame).
Our analysis looks at how many times certain words appear in the lyrics to see how each song compares.
We also look at song length and speed of each song based on the official versions availible on spotify"),
br(),
p(paste("Overall out of the 65 songs we looked at,", fight_count," songs
contain the word 'fight' -- usually more than once. In fact, the word 'fight'
appears", total_fight, "in total throughout all the songs!", win_count, "songs contain
'win' or 'victory' and", rah_count, "contain the phrase 'rah'.")),
br(),
#this code just adds some custom HTML styling
tags$style(HTML("
h2 {
background-color: #ccd5d8;
color: Black;
}")),
# --------------------------------------------------------------------------
# Add code for a sidebar and maine panel here, Your sidebar should appear
# on the left and should contain the following elements:
# 1) drop down menu that lets the user select a particular college from the
#    dataset. The inputId should be `school_name` and the prompt should be
#    "Choose a School"
# 2) Three html outputs that we will use to contain the information about the
#   lyrics for that particular school. Use the following 4 lines of code to
#   add these elements:
#htmlOutput(outputId = "song_name"),
#htmlOutput(outputId = "composer"),
#htmlOutput(outputId = "lyrics"),
#br()
#
sidebarLayout(
sidebarPanel(
selectInput(inputId = "school_name", label = "Choose a School", choices = unique(songs_df$school)),
htmlOutput(outputId = "song_name"),
htmlOutput(outputId = "composer"),
htmlOutput(outputId = "lyrics"),
br()
),
# The main panel should appear on the right and should contain the following
# elelemnts:
# 1) An h3 header with the text "Comparing Lyrics"
# 2) a plotlyOutput with the outputID set as `scatter`
mainPanel(
h3("Comparing Lyrics"),
plotlyOutput(outputId = "scatter")
),
),
#---------------------------------------------------------------------------
titlePanel("Filter All Songs by Specific Words"),
textInput(
inputId = "word",
label = "Enter text to search for song lyrics that contain that word"
),
htmlOutput(outputId = "songs"),
)
runApp()
source("~/Desktop/INFO201/HW 5/analysis.R")
runApp()
source("~/Desktop/INFO201/HW 5/analysis.R")
source("~/Desktop/INFO201/HW 5/analysis.R")
runApp()
runApp()
source("~/Desktop/INFO201/HW 5/analysis.R")
runApp()
source("~/Desktop/INFO201/HW 5/analysis.R")
runApp()
runApp()
runApp('~/Desktop/final-projects-TIKTOK')
runApp('~/Desktop/final-projects-TIKTOK')
runApp('~/Desktop/final-projects-TIKTOK')
runApp('~/Desktop/final-projects-TIKTOK')
runApp('~/Desktop/final-projects-TIKTOK')
